Tables
Patrons table:

PatronID (int, Primary Key)

GivenName (varchar(50), not null)

Surname (varchar(50), not null)

EmailContact (varchar(100), unique, not null)

Birthdate (date)

Rooms table:

RoomID (int, Primary Key)

Category (varchar(80), not null)

CostPerNight (decimal)

AvailabilityStatus (varchar(50))

Reservations table:

ReservationID (int, Primary Key)

PatronID (int, Foreign Key references Patrons(PatronID))

RoomID (int, Foreign Key references Rooms(RoomID))

ReservationDate (date, default to current date)

Functions
ListOpenRooms: Returns rooms a patron is not currently booked for.

CalculateStayDays: Computes the number of days a patron’s stay lasts, based on check-in and check-out dates.

GetPatronFullName: Combines given name and surname to return the full name of a patron.

ListRoomsByCategory: Returns rooms of a specific category.

FetchBookedRooms: Returns rooms a patron has booked.

Include CASE: Use a CASE statement in one of the functions, e.g., in CalculateStayDays, use CASE to check the duration of stay and apply different pricing.

Convert Types: In one of the functions, convert text data to datetime or int, e.g., convert a text date to datetime in CalculateStayDays.

Procedures (use transactions)
IdentifyUnbookedPatrons: Retrieves patrons who haven’t booked any rooms.

InsertNewRoom: Adds a new room into the Rooms table.

RevisePatronDetails: Updates the information of an existing patron.

Views
Create a view to show all reservations along with patron details.

Create another view to show all open rooms along with their categories.

Triggers
Create a trigger to automatically update the Reservations table when a new record is added to the Rooms table.

Create another trigger to log changes when a patron’s information is updated in the Patrons table.

ALTER Tasks
Modify the Rooms table to add a new column for FloorLevel.

Alter the CalculateStayDays function to add new logic for peak holiday periods.

Alter constraints: e.g., change the EmailContact column in Patrons to be nullable.

DELETE Tasks
Delete constraints: e.g., remove the unique constraint on the EmailContact column in Patrons.

Delete every table, function, procedure, trigger, etc., one by one to practice the deletion power in SQL Server.

Insert, Update, and Delete Tasks
Insert rows:

Add the following rows into the Patrons table:

(1, 'John', 'Doe', 'john.doe@hotel.com', '1985-05-15')

(2, 'Jane', 'Smith', 'jane.smith@hotel.com', '1990-08-22')

(3, 'Michael', 'Brown', NULL, '1980-12-01')

(4, 'Emily', 'Jones', 'emily.jones@hotel.com', NULL)

(5, 'Sarah', 'Taylor', 'sarah.taylor@hotel.com', '1995-11-09')

(6, 'David', 'Clark', 'david.clark@hotel.com', '1987-07-21')

Add the following rows into the Rooms table:

(1, 'Single', 50.00, 'Open')

(2, 'Double', 75.00, 'Occupied')

(3, 'Luxury', 150.00, 'Open')

(4, 'Premium', 200.00, 'Open')

(5, 'Family', 100.00, 'Occupied')

(6, 'Business', 175.00, 'Occupied')

Add the following rows into the Reservations table:

(1, 1, 1, '2024-09-01')

(2, 2, 2, '2024-09-02')

(3, 3, 3, NULL)

(4, 4, 4, '2024-09-04')

(5, 5, 5, '2024-09-05')

(6, 6, 6, NULL)

Update rows:

Update the email of the patron with PatronID 3 in the Patrons table to 'michael.brown@hotel.com'.

Update the availability status of the room with RoomID 4 in the Rooms table to 'Occupied'.

Update the reservation date of the reservation with ReservationID 3 in the Reservations table to '2024-09-03'.

Delete rows:

Delete the patron with PatronID 6 from the Patrons table.

Delete the room with RoomID 6 from the Rooms table.

Delete the reservation with ReservationID 6 from the Reservations table.
