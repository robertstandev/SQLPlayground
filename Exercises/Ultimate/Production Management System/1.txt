Tables:
Workers table:

WorkerID (int, Primary Key)

FirstName (varchar(60), not null)

LastName (varchar(60), not null)

EmailAddress (varchar(120), unique, not null)

DateOfBirth (date)

Products table:

ProductID (int, Primary Key)

ProductName (varchar(100), not null)

SupervisorName (varchar(100))

ProductionSchedule (varchar(50))

ProductionRecords table:

ProductionRecordID (int, Primary Key)

WorkerID (int, Foreign Key references Workers(WorkerID))

ProductID (int, Foreign Key references Products(ProductID))

ProductionDate (date, default to current date)

Functions:
GetAvailableProducts: Returns products a worker is not currently assigned to.

CalculateProductionRate: Calculates the production rate based on the number of units produced.

GetWorkerFullName: Concatenates first name and last name to return the full name of a worker.

GetProductsBySupervisor: Returns products supervised by a specific supervisor.

GetAssignedProducts: Returns products a worker is assigned to.

Use CASE: Incorporate a CASE statement in one of the functions, e.g., in CalculateProductionRate, use CASE to check the production percentage and apply different grading levels.

Convert Data Types: In one of the functions, convert text data to datetime or int, e.g., convert a text date to datetime in CalculateProductionRate.

Procedures (use transactions):
RetrieveAbsentWorkers: Retrieves workers who have missed their shifts.

AddNewProduct: Adds a new product into the Products table.

UpdateWorkerInfo: Updates the information of an existing worker.

Views:
Create a view to show all production records along with worker details.

Create another view to show all available products along with their supervisors.

Triggers:
Create a trigger to automatically update the ProductionRecords table when a new record is added to the Products table.

Create another trigger to log changes when a workerâ€™s information is updated in the Workers table.

ALTER Tasks:
Modify the Products table to add a new column for ProductionRoomNumber.

Alter the CalculateProductionRate function to add new logic for holiday periods.

Alter constraints: e.g., change the EmailAddress column in Workers to be nullable.

DELETE Tasks:
Delete constraints: e.g., remove the unique constraint on the EmailAddress column in Workers.

Delete every table, function, procedure, trigger, etc., one by one to practice the deletion power in SQL Server.

Insert, Update, and Delete Tasks:
Insert rows: Add the following rows into the Workers table:

(1, 'John', 'Doe', 'john.doe@example.com', '1985-05-15')

(2, 'Jane', 'Smith', 'jane.smith@example.com', '1990-08-22')

(3, 'Michael', 'Brown', NULL, '1980-12-01')

(4, 'Emily', 'Jones', 'emily.jones@example.com', NULL)

(5, 'Sarah', 'Taylor', 'sarah.taylor@example.com', '1995-11-09')

(6, 'David', 'Clark', 'david.clark@example.com', '1985-07-21')

Add the following rows into the Products table:

(1, 'Wooden Chair', 'Mr. Wilson', 'Mon/Wed/Fri 10:00-11:00')

(2, 'Metal Table', 'Ms. Adams', 'Tue/Thu 12:00-13:30')

(3, 'Plastic Stool', NULL, 'Mon/Wed 14:00-15:30')

(4, 'Glass Vase', 'Dr. Brown', NULL)

(5, 'Ceramic Pot', 'Dr. Green', 'Tue/Thu 10:00-11:30')

(6, 'Leather Sofa', 'Mr. White', 'Mon/Wed/Fri 12:00-13:00')

Add the following rows into the ProductionRecords table:

(1, 1, 1, '2024-09-01')

(2, 2, 2, '2024-09-02')

(3, 3, 3, NULL)

(4, 4, 4, '2024-09-04')

(5, 5, 5, '2024-09-05')

(6, 6, 6, NULL)

Update rows:

Update the email of the worker with WorkerID 3 in the Workers table to 'michael.brown@example.com'.

Update the production schedule of the product with ProductID 4 in the Products table to 'Mon/Wed 10:00-11:30'.

Update the production date of the production record with ProductionRecordID 3 in the ProductionRecords table to '2024-09-03'.

Delete rows:

Delete the worker with WorkerID 6 from the Workers table.

Delete the product with ProductID 6 from the Products table.

Delete the production record with ProductionRecordID 6 from the ProductionRecords table.
